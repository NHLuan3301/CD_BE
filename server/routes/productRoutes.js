const express = require("express");
const router = express.Router();
const Product = require("../models/Product.js");
const Company = require("../models/Company.js"); // Import Company model

// üõçÔ∏è L·∫•y danh s√°ch s·∫£n ph·∫©m (bao g·ªìm th√¥ng tin c√¥ng ty)
router.get("/", async (req, res) => {
  try {
    const products = await Product.find().populate(
      "company",
      "name email phone"
    );
    res.json(products);
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi l·∫•y danh s√°ch s·∫£n ph·∫©m", error });
  }
});
// ‚ûï T·∫°o s·∫£n ph·∫©m m·ªõi (Ki·ªÉm tra company tr∆∞·ªõc khi t·∫°o)
router.post("/", async (req, res) => {
  try {
    const { name, price, image, stock, description, company } = req.body;

    if (!name || !price || !stock || !company) {
      return res.status(400).json({ message: "Thi·∫øu th√¥ng tin s·∫£n ph·∫©m" });
    }

    // Ki·ªÉm tra xem c√¥ng ty c√≥ t·ªìn t·∫°i kh√¥ng
    const existingCompany = await Company.findById(company);
    if (!existingCompany) {
      return res.status(400).json({ message: "C√¥ng ty kh√¥ng t·ªìn t·∫°i" });
    }

    const newProduct = new Product({
      name,
      price,
      image,
      stock,
      description,
      company,
    });

    const savedProduct = await newProduct.save();
    res.status(201).json(savedProduct);
  } catch (error) {
    console.error("L·ªói khi th√™m s·∫£n ph·∫©m:", error);
    res.status(400).json({ message: "D·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá", error });
  }
});

// ‚úèÔ∏è C·∫≠p nh·∫≠t s·∫£n ph·∫©m (Ki·ªÉm tra company n·∫øu c√≥ c·∫≠p nh·∫≠t)
router.put("/:id", async (req, res) => {
  try {
    const { company } = req.body;

    // N·∫øu ng∆∞·ªùi d√πng c·∫≠p nh·∫≠t company, ki·ªÉm tra xem n√≥ c√≥ t·ªìn t·∫°i kh√¥ng
    if (company) {
      const existingCompany = await Company.findById(company);
      if (!existingCompany) {
        return res.status(400).json({ message: "C√¥ng ty kh√¥ng t·ªìn t·∫°i" });
      }
    }

    const updatedProduct = await Product.findByIdAndUpdate(
      req.params.id,
      req.body,
      { new: true }
    );

    if (!updatedProduct) {
      return res.status(404).json({ message: "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i" });
    }

    res.json(updatedProduct);
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m", error });
  }
});

// üóëÔ∏è X√≥a s·∫£n ph·∫©m
router.delete("/:id", async (req, res) => {
  try {
    const deletedProduct = await Product.findByIdAndDelete(req.params.id);

    if (!deletedProduct) {
      return res.status(404).json({ message: "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i" });
    }

    res.json({ message: "X√≥a s·∫£n ph·∫©m th√†nh c√¥ng", deletedProduct });
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi x√≥a s·∫£n ph·∫©m", error });
  }
});
//api sort, search,page, limit
router.get("/search", async (req, res) => {
  try {
    let { page, limit, sortBy, order, keyword } = req.query;
    page = parseInt(page) || 1; // M·∫∑c ƒë·ªãnh trang 1
    limit = parseInt(limit) || 10; // M·∫∑c ƒë·ªãnh l·∫•y 10 s·∫£n ph·∫©m m·ªói trang
    order = order === "asc" ? -1 : 1; // M·∫∑c ƒë·ªãnh tƒÉng d·∫ßn (asc)

    const skip = (page - 1) * limit;
    const filter = keyword ? { name: { $regex: keyword, $options: "i" } } : {};

    const products = await Product.find(filter)
      .populate("company", "name email phone")
      .sort({ [sortBy]: order })
      .skip(skip)
      .limit(limit);
    //tr·∫£ l·∫°i cho request c·ªßa ng∆∞·ªùi d√πng
    res.json(products);
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi l·∫•y danh s√°ch s·∫£n ph·∫©m", error });
  }
});
module.exports = router;
